{"version":3,"file":"static/js/163.446031d2.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;","import { useState } from 'react';\n\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsAsyncActions';\nimport { selectContacts } from 'redux/selectors';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Button, Container, TextField, Typography } from '@mui/material';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n\n\n  const validateContact = () => {\n    if (!contacts || !Array.isArray(contacts)) {\n      return false;\n    }\n    return contacts.some(\n      contact => (\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n      )\n    );\n  };\n\n  const handleSubmit = async (values) => {\n    const {name, number} = values;\n\n    const isValidateContact = validateContact(name, number);\n\n    if (isValidateContact) {\n      Notiflix.Notify.failure(`${name} is already in contacts.`)\n      return;\n    }\n\n    try {\n      const response = await dispatch(addContact({ name, number }));\n\n      if (addContact.fulfilled.match(response)) {\n        setName(\"\")\n        setNumber(\"\")\n        Notiflix.Notify.success(\"Success\");\n      } else {\n        Notiflix.Notify.failure(\"Failed\");\n      }\n    } catch (error) {\n      Notiflix.Notify.failure(\"Error\");\n    }\n\n    \n  };\n\n\n\n  return (\n  <Container maxWidth=\"xs\">\n      <Typography\n        variant=\"h2\"\n        align=\"center\"\n        gutterBottom\n        sx={{ marginTop: 8}}\n      >\n      \n      </Typography>\n      <Formik\n      initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Field\n            as={TextField}\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            helperText={<ErrorMessage name=\"name\" />}\n            \n          />\n          <Field\n            as={TextField}\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Number\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            helperText={<ErrorMessage name=\"number\" />}\n            \n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"medium\"\n            sx={{ mt: 2 }}\n          >\n            Add Contact\n          </Button>\n        </Form>\n      </Formik>\n    </Container>\n  );\n}\n\n\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContList = styled.ul`\n\n`;\nexport const ListItem = styled.li`\n\n`\nexport const Button = styled.button`\nmargin-left:20px;\n`\n\n","import React from 'react';\nimport { ListItem, Button } from '../ContactList.styled';\nimport Notiflix from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsAsyncActions';\n\n\nfunction ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n \n\n  const removeContact = async () => {\n    try {\n\n      await dispatch(deleteContact(id));\n      \n      Notiflix.Notify.success(\"Successful\")\n    } catch (error) {\n      Notiflix.Notify.failure(\"Error\");\n    }\n  };\n  return (\n    <ListItem key={id}>\n      {name}: {number}\n      <Button onClick={() => removeContact(id)}>Delete</Button>\n    </ListItem>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\n\nimport ContactItem from './ContactItem/ContactItem';\n\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectContactsFilter } from 'redux/selectors';\n\nimport {ContList} from './ContactList.styled';\n\n\nfunction ContactList() {\n\n  const filter = useSelector(selectContactsFilter);\n  const contacts = useSelector(selectContacts);\n  if (!contacts || !Array.isArray(contacts) || contacts.length === 0) {\n    return null;\n  }\n\n  if (!contacts) {\n    return null;\n  }\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n \n\n  return (\n    <ContList>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ContList>\n  );\n}\n\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n\n`;\n\nexport const FilterInput = styled.input`\nmargin-left:20px;\n`;","\nimport { FilterLabel, FilterInput } from './Filter.styled';\nimport React from 'react';\nimport { selectContactsFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/FilterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n\nfunction Filter() {\n\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  }\n\n  return (\n    <FilterLabel>\n      Filter contacts by name:\n      <FilterInput type=\"text\" value={filter} onChange={onChange} />\n    </FilterLabel>\n  );\n}\n\n\nexport default Filter;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport {fetchContacts} from '../redux/contactsAsyncActions'\n\nfunction Contacts() {\n  useEffect(() => {\n    \n    fetchContacts(); // Потрібно передати необхідні параметри, які ви використовуєте для запиту\n  }, []);\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <ContactList />\n        <Filter />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectContactsFilter","filters","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","validateContact","Array","isArray","some","contact","toLowerCase","handleSubmit","values","Notiflix","addContact","response","Container","maxWidth","Typography","variant","align","gutterBottom","sx","marginTop","initialValues","onSubmit","as","TextField","fullWidth","id","label","margin","helperText","Button","type","color","size","mt","ContList","styled","ListItem","removeContact","deleteContact","onClick","filter","length","filteredContacts","includes","map","FilterLabel","FilterInput","value","onChange","e","setFilter","target","trim","useEffect","fetchContacts"],"sourceRoot":""}